variables:
  BUNDLE_DEPLOYMENT: "true"
  BUNDLE_FROZEN: "true"
  BUNDLE_CACHE_PATH: ".bundler-cache"
  BUNDLE_PATH: ".bundler-cache"

cache: &cacheSettings
  key:
    files:
      - documentation/Gemfile.lock
      - package-lock.json
  when: on_success
  policy: pull
  paths:
    - documentation/.bundler-cache
    - .npm

.npmInstallScript: &npmInstallScript
  - npm ci --no-shrinkwrap --cache .npm --prefer-offline

.rubyInstallScript: &rubyInstallScript
  - gem install bundler:2.2.15
  - bundle install -j $(nproc) --gemfile documentation/Gemfile

stages:
  - install
  - build:library
  - build:docs
  - deploy

install:node:
  stage: install
  needs: [ ]
  image: node:15-alpine
  script:
    - *npmInstallScript
  cache:
    <<: *cacheSettings
    policy: pull-push
  rules:
    - changes:
      - package-lock.json
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: true

install:jekyll:
  stage: install
  needs: [ ]
  image: ruby:3.0
  script:
    - *rubyInstallScript
  cache:
    <<: *cacheSettings
    policy: pull-push
  rules:
    - changes:
      - documentation/Gemfile.lock
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: true

build:library:
  stage: build:library
  image: node:15-alpine
  before_script:
    - *npmInstallScript
  script:
    - npm run build
  artifacts:
    paths:
      - dist
      - assets
    expire_in: 1 day
  rules:

build:docs:
  stage: build:docs
  image: ruby:3.0-slim
  dependencies:
    - build:library
  before_script:
    - *rubyInstallScript
  script:
    - cd documentation
    - mkdir _sass/custom
    - cp ../dist/index.css _sass/custom/custom.scss
    - cp ../README.md index.md
    - bundle exec jekyll build -d build
  artifacts:
    paths:
      - documentation/build
    expire_in: 1 day
  rules:

pages:
  stage: deploy
  dependencies:
    - build:docs
  image: alpine
  script:
    - rm -rf public
    - mv documentation/build public
  artifacts:
    paths:
      - public
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
