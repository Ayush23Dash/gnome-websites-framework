variables:
  BUNDLE_DEPLOYMENT: "true"
  BUNDLE_FROZEN: "true"
  BUNDLE_CACHE_PATH: ".bundler-cache"
  BUNDLE_PATH: ".bundler-cache"

cache: &cacheSettings
  key:
    files:
      - documentation/Gemfile.lock
      - package-lock.json
  when: on_success
  policy: pull
  paths:
    - documentation/.bundler-cache
    - .npm

.npmInstallScript: &npmInstallScript
  - npm ci --no-shrinkwrap --cache .npm --prefer-offline

.rubyInstallScript: &rubyInstallScript
  - gem install bundler:2.2.11
  - bundle install -j $(nproc) --gemfile documentation/Gemfile

stages:
  - install
  - build:library
  - build:docs
  - deploy

install:node:
  stage: install
  needs: [ ]
  image: node:15-alpine
  script:
    - *npmInstallScript
  cache:
    <<: *cacheSettings
    policy: pull-push
  rules:
    - changes:
      - package-lock.json
    - exists: 
      - .npm
      when: never
    - when: always

install:jekyll:
  stage: install
  needs: [ ]
  image: ruby:2.7
  script:
    - *rubyInstallScript
  cache:
    <<: *cacheSettings
    policy: pull-push
  rules:
    - changes:
      - documentation/Gemfile.lock
    - exists: 
      - documentation/.bundler-cache
      when: never
    - when: always

build:library:
  stage: build:library
  image: node:15-alpine
  script:
    - *npmInstallScript
    - npm run build
  artifacts:
    paths:
      - dist
      - assets
    expire_in: 1 day
  rules:
    - when: always

build:docs:
  stage: build:docs
  needs:
    - job: build:library
      artifacts: true
  image: ruby:2.7-slim
  script:
    - cd documentation
    - mkdir _sass/custom
    - cp ../dist/index.css "_sass/custom/custom.scss"
    - bundle exec jekyll build -d build
  artifacts:
    paths:
      - documentation/build
    expire_in: 1 day
  rules:
    - when: always

pages:
  stage: deploy
  needs:
    - job: build:docs
      artifacts: true
  image: alpine
  script:
    - rm -rf public
    - mv documentation/build public
  artifacts:
    paths:
      - public
    expire_in: 1 day
  only:
    - main
